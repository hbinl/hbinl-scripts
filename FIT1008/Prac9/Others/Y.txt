The first argument is a string containing the filename. 
The second argument is another string containing a few 
characters describing the way in which the file will be 
'w' for only writing (an existing file with the same 
name will be erased), and 'a' opens the file for appending; 
any data written to the file is automatically added to the 
end. 'r+' opens the file for both reading and writing. 
The mode argument is optional; 'r' will be assumed if it’s 
omitted.

Normally, files are opened in text mode, that means, you read 
and write strings from and to the file, which are encoded in 
a specific encoding (the default being UTF-8). 'b' appended 
to the mode opens the file in binary mode: now the data is 
read and written in the form of bytes objects. This mode 
should be used for all files that don’t contain text.

In text mode, the default when reading is to convert 
platform-specific line endings (\n on Unix, \r\n on Windows) 
to just \n. When writing in text mode, the default is to convert 
occurrences of \n back to platform-specific line endings. 
This behind-the-scenes modification to file data is fine for 
text files, but will corrupt binary data like that in JPEG or 
EXE files. Be very careful to use binary mode when reading and 
writing such files.

Strings can easily be written to and read from a file. 
Numbers take a bit more effort, since the read() method only 
returns strings, which will have to be passed to a function 
like int(), which takes a string like '123' and returns its 
numeric value 123. When you want to save more complex data 
types like nested lists and dictionaries, parsing and 
serializing by hand becomes complicated.

Rather than having users constantly writing and debugging 
code to save complicated data types to files, Python allows 
you to use the popular data interchange format called JSON 
(JavaScript Object Notation). The standard module called 
json can take Python data hierarchies, and convert them to 
string representations; this process is called serializing. 
Reconstructing the data from the string representation is 
called deserializing. Between serializing and deserializing, 
the string representing the object may have been stored in a 
file or data, or sent over a network connection to some 
distant machine.